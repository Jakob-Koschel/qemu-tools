version: '3'

env:
  ENABLE_ACCEL:    '1'
  ENABLE_EFI:      '1'
  ENABLE_SNAPSHOT: '1'

  ARCH:            'x86_64'
  DEBARCH:         'amd64'
  GRUB_TARGET:     'x86_64'

  # ARCH:            'aarch64'
  # DEBARCH:         'arm64'
  # GRUB_TARGET:     'arm64'

  DISTRIBUTION:    'debian'
  RELEASE:         'bullseye'
  IMAGE:           'out/bullseye.img'
  # DISTRIBUTION:    'ubuntu'
  # RELEASE:         'jammy'
  # IMAGE:           'out/jammy.img'

  IMAGE_SIZE:      '4095'
  CHROOT:          'out/chroot'
  MNT:             'out/mnt'
  CHROOT_HOSTNAME: 'jkl-vm'
  CHROOT_USERNAME: 'jkl'

  # enable networking
  QEMU_NET_DEVICE: 'e1000,netdev=net0'
  QEMU_NETDEV:     'user,id=net0'
  QEMU_SSH_PORT:   '5555'

  QEMU_CORES:      '2'
  QEMU_MEMORY:     '8192'

tasks:
  qemu:
    desc: run image in qemu
    cmds:
      - scripts/run-qemu.sh

  create-chroot:
    desc: create chroot environment
    env:
      ADD_PACKAGES: "{{.ADD_PACKAGES}}"
    cmds:
      - mkdir -p out
      - scripts/create-chroot.sh

  create-image:
    desc: create syzkaller image
    cmds:
      - task: create-chroot
        vars:
          ADD_PACKAGES:
            sh: |
              echo -n "ifupdown,net-tools,initramfs-tools,grub-efi-{{.DEBARCH}}"
              case "{{.DISTRIBUTION}}" in
                  ubuntu)
                      echo ",linux-firmware,linux-image-generic"
                      ;;
                  debian)
                      echo ",firmware-realtek,linux-image-{{.DEBARCH}}"
                      ;;
              esac
      - scripts/create-image.sh
      - sudo rm -rf {{.CHROOT}}
      - task: image-install-grub

  image-install-grub:
    desc: install grub efi on create image to boot on hardware / qemu
    cmds:
      - task: enter-mount-chroot
        vars:
          CLI_ARGS: |
            sed -i 's/GRUB_CMDLINE_LINUX=\".*\"/GRUB_CMDLINE_LINUX=\"rw console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0\"/g'
            /etc/default/grub
      - task: enter-mount-chroot
        vars:
          CLI_ARGS: |
            sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\".*\"/GRUB_CMDLINE_LINUX_DEFAULT=\"\"/g'
            /etc/default/grub
      - task: enter-mount-chroot
        vars:
          CLI_ARGS: |
            sed -i 's/#GRUB_TERMINAL/GRUB_TERMINAL/g'
            /etc/default/grub
      - task: enter-mount-chroot
        vars:
          CLI_ARGS:
            sh: |
              GRUB_EXTRA_ARGS=""
              # --force-extra-removable does not exist on ubuntu and is default behavior
              if [ {{.DISTRIBUTION}} = debian ]; then
                GRUB_EXTRA_ARGS="--force-extra-removable"
              fi
              echo "grub-install --target={{.GRUB_TARGET}}-efi
                --efi-directory=/boot/efi
                $GRUB_EXTRA_ARGS
                --no-nvram
                --no-floppy
                --modules=\"part_msdos part_gpt\"
                --grub-mkdevicemap=/boot/grub/device.map
                $LOOP_DEV"
      - task: enter-mount-chroot
        vars:
          CLI_ARGS: |
            update-initramfs -c -k all
      - task: enter-mount-chroot
        vars:
          CLI_ARGS: |
            update-grub

  mount-image:
    desc: mount a image using a loop device
    env:
      COMMAND: '{{.CLI_ARGS}}'
    cmds:
      - scripts/mount-image.sh

  enter-chroot:
    desc: enter a chroot environment
    cmds:
      - bash scripts/enter-chroot.sh "{{.CLI_ARGS}}"

  enter-mount-chroot:
    desc: enter a chroot within an image
    cmds:
      - task: mount-image
        vars:
          CLI_ARGS: "CHROOT={{.MNT}} task enter-chroot -- {{.CLI_ARGS}}"

  chroot-cmd:
    desc: run command within chroot
    cmds:
      - task: enter-chroot
